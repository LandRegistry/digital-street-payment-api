buildscript {
    ext.kotlin_version = '1.1.60'
    ext.corda_release_version = '3.1-corda'
    ext.spring_boot_version = '2.0.4.RELEASE'
    ext.junit_version = '4.12'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
    }
}

apply plugin: 'kotlin'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()

    flatDir {
        dirs 'libs'
    }

}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "net.corda:corda-rpc:$corda_release_version"
    compile "net.corda:corda-finance:$corda_release_version"

    testCompile group: 'junit', name: 'junit', version: '4.12'

    compile "org.springframework.boot:spring-boot-starter-web:$spring_boot_version"
    testCompile("org.springframework.boot:spring-boot-starter-test:$spring_boot_version")
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"

    compile "com.hmlr:cordapp-contracts-states:-SNAPSHOT"
    compile "com.hmlr:cordapp-flows:-SNAPSHOT"
    compile "com.hmlr:cordapp-common:-SNAPSHOT"

    compile "khttp:khttp:0.1.0"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}


bootJar {
    mainClassName = 'com.hmlr.api.ServerKt'
    baseName = 'payment-api'
}

task runSpringServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.hmlr.api.ServerKt'

    if (project.hasProperty("serverPort"))
    {
        environment "server.port", findProperty('serverPort')
    }

    if (project.hasProperty("nodeIP") &&
            project.hasProperty("nodePort") &&
            project.hasProperty("nodeUsername") &&
            project.hasProperty("nodePassword"))
    {
        environment "CONFIG_RPC_HOST", findProperty('nodeIP')
        environment "CONFIG_RPC_PORT", findProperty('nodePort')
        environment "CONFIG_RPC_USERNAME", findProperty('nodeUsername')
        environment "CONFIG_RPC_PASSWORD", findProperty('nodePassword')
    }
}
